{"ast":null,"code":"var _jsxFileName = \"/Users/jeremyl/Documents/GitHub/portfolio_v2/src/components/FadeInSection.js\",\n    _s = $RefreshSig$();\n\nimport \"./FadeInSection.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FadeInSection = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const domRef = React.useRef();\n  const [isVisible, setVisible] = React.useState(false);\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      // In your case there's only one element to observe:     \n      if (entries[0].isIntersecting) {\n        // Not possible to set it back to false like this:\n        setVisible(true); // No need to keep observing:\n\n        observer.unobserve(domRef.current);\n      }\n    });\n    observer.observe(domRef.current);\n    return () => observer.unobserve(domRef.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    ref: domRef,\n    className: isVisible ? ' is-visible' : '',\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 13\n  }, this);\n};\n\n_s(FadeInSection, \"vRFLVc+Fe3EQ+zUc/+XSjPAxSgY=\");\n\n_c = FadeInSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"FadeInSection\");","map":{"version":3,"sources":["/Users/jeremyl/Documents/GitHub/portfolio_v2/src/components/FadeInSection.js"],"names":["FadeInSection","children","domRef","React","useRef","isVisible","setVisible","useState","useEffect","observer","IntersectionObserver","entries","isIntersecting","unobserve","current","observe"],"mappings":";;;AACA,OAAO,qBAAP;;;AAEA,MAAMA,aAAa,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AACrC,QAAMC,MAAM,GAAGC,KAAK,CAACC,MAAN,EAAf;AACA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BH,KAAK,CAACI,QAAN,CAAe,KAAf,CAAhC;AAEAJ,EAAAA,KAAK,CAACK,SAAN,CAAgB,MAAM;AAClB,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBC,OAAO,IAAI;AACjD;AACA,UAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAf,EAA+B;AAC3B;AACAN,QAAAA,UAAU,CAAC,IAAD,CAAV,CAF2B,CAI3B;;AACAG,QAAAA,QAAQ,CAACI,SAAT,CAAmBX,MAAM,CAACY,OAA1B;AACH;AACJ,KATgB,CAAjB;AAWJL,IAAAA,QAAQ,CAACM,OAAT,CAAiBb,MAAM,CAACY,OAAxB;AAEA,WAAO,MAAML,QAAQ,CAACI,SAAT,CAAmBX,MAAM,CAACY,OAA1B,CAAb;AACC,GAfD,EAeG,EAfH;AAiBA,sBAAQ;AAAS,IAAA,GAAG,EAAGZ,MAAf;AAAwB,IAAA,SAAS,EAAGG,SAAS,GAAG,aAAH,GAAmB,EAAhE;AAAA,cAAuEJ;AAAvE;AAAA;AAAA;AAAA;AAAA,UAAR;AACH,CAtBD;;GAAMD,a;;KAAAA,a","sourcesContent":["\nimport \"./FadeInSection.css\"\n\nconst FadeInSection = ({ children, }) => {\n    const domRef = React.useRef();\n    const [isVisible, setVisible] = React.useState(false);\n\n    React.useEffect(() => {\n        const observer = new IntersectionObserver(entries => {\n            // In your case there's only one element to observe:     \n            if (entries[0].isIntersecting) {  \n                // Not possible to set it back to false like this:\n                setVisible(true);\n        \n                // No need to keep observing:\n                observer.unobserve(domRef.current);\n            }\n        });\n    \n    observer.observe(domRef.current);\n    \n    return () => observer.unobserve(domRef.current);\n    }, []);\n\n    return (<section ref={ domRef } className={ isVisible ? ' is-visible' : '' }>{ children }</section>);\n};"]},"metadata":{},"sourceType":"module"}