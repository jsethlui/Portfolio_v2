{"ast":null,"code":"var _jsxFileName = \"/Users/jeremyl/Documents/GitHub/portfolio_v2/src/pages/components/FadeInSection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FadeInSection = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const domRef = React.useRef();\n  const [isVisible, setVisible] = useState(false);\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      // In your case there's only one element to observe:     \n      if (entries[0].isIntersecting) {\n        // Not possible to set it back to false like this:\n        setVisible(true); // No need to keep observing:\n\n        observer.unobserve(domRef.current);\n      }\n    });\n    observer.observe(domRef.current);\n    return () => observer.unobserve(domRef.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    ref: domRef,\n    className: isVisible ? ' is-visible' : '',\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 11\n  }, this);\n};\n\n_s(FadeInSection, \"vRFLVc+Fe3EQ+zUc/+XSjPAxSgY=\");\n\n_c = FadeInSection;\nexport default FadeInSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"FadeInSection\");","map":{"version":3,"sources":["/Users/jeremyl/Documents/GitHub/portfolio_v2/src/pages/components/FadeInSection.js"],"names":["React","useState","FadeInSection","children","domRef","useRef","isVisible","setVisible","useEffect","observer","IntersectionObserver","entries","isIntersecting","unobserve","current","observe"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,aAAa,GAAG,QAAmB;AAAA;;AAAA,MAAlB;AAAEC,IAAAA;AAAF,GAAkB;AACrC,QAAMC,MAAM,GAAGJ,KAAK,CAACK,MAAN,EAAf;AACA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AAEAO,EAAAA,SAAS,CAAC,MAAM;AAChB,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBC,OAAO,IAAI;AACnD;AACA,UAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAf,EAA+B;AAE7B;AACAL,QAAAA,UAAU,CAAC,IAAD,CAAV,CAH6B,CAK7B;;AACAE,QAAAA,QAAQ,CAACI,SAAT,CAAmBT,MAAM,CAACU,OAA1B;AACD;AACF,KAVgB,CAAjB;AAYAL,IAAAA,QAAQ,CAACM,OAAT,CAAiBX,MAAM,CAACU,OAAxB;AAEA,WAAO,MAAML,QAAQ,CAACI,SAAT,CAAmBT,MAAM,CAACU,OAA1B,CAAb;AACD,GAhBU,EAgBR,EAhBQ,CAAT;AAkBF,sBAAQ;AAAS,IAAA,GAAG,EAAGV,MAAf;AAAwB,IAAA,SAAS,EAAGE,SAAS,GAAG,aAAH,GAAmB,EAAhE;AAAA,cAAuEH;AAAvE;AAAA;AAAA;AAAA;AAAA,UAAR;AACD,CAvBD;;GAAMD,a;;KAAAA,a;AAyBN,eAAeA,aAAf","sourcesContent":["\nimport React, { useState } from \"react\";\n\nconst FadeInSection = ({ children, }) => {\n    const domRef = React.useRef();\n    const [isVisible, setVisible] = useState(false);\n\n    useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      // In your case there's only one element to observe:     \n      if (entries[0].isIntersecting) {\n      \n        // Not possible to set it back to false like this:\n        setVisible(true);\n        \n        // No need to keep observing:\n        observer.unobserve(domRef.current);\n      }\n    });\n    \n    observer.observe(domRef.current);\n    \n    return () => observer.unobserve(domRef.current);\n  }, []);\n\n  return (<section ref={ domRef } className={ isVisible ? ' is-visible' : '' }>{ children }</section>);\n}\n\nexport default FadeInSection;"]},"metadata":{},"sourceType":"module"}